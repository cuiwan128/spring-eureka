<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.example.mapper.UserMapper">

    <resultMap type="org.example.entity.Orders" id="orderAndUserResultMap">
        <!--
            id：指定主键字段对应关系
            column：列，数据库中的字段名称
            property：属性，pojo的属性名称
         -->
        <id column="id" property="id"/>
        <!-- result：指定非主键字段的对应关系 -->
        <result column="userid" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>
        <!-- 指定单个对象的对应关系
            property：指定将数据放入Orders中的user属性中
            javaType：user属性的类型
         -->
        <association property="user" javaType="org.example.entity.User">
            <id column="uid" property="id"/>
            <result column="name" property="name"/>
            <result column="age" property="age"/>
            <result column="email" property="email"/>
        </association>
<!--        <result column="uid" property="user.id"/>-->
<!--        <result column="name" property="user.name"/>-->
<!--        <result column="age" property="user.age"/>-->
<!--        <result column="email" property="user.email"/>-->
    </resultMap>

    <select id="selectAll" resultType="org.example.entity.User">
        select * from user where ${ew.sqlSegment}
    </select>

    <!-- 一对一关系 查询 -->
    <select id="selectOrderUser" resultMap="orderAndUserResultMap">
        SELECT a.*,b.id uid,b.name,b.age,b.email
        FROM orders a,user b
        WHERE a.userid=b.id
    </select>
    <resultMap type="org.example.entity.User" id="userAndOrdersResultMap">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="age" property="age"/>
        <result column="email" property="email"/>
        <!-- 指定对应的集合对象关系映射
            property：将数据放入user对象中的ordersList中
            ofType：指定ordersList属性的泛型类型
         -->
        <collection property="ordersList" ofType="org.example.entity.Orders">
            <id column="oid" property="id"/>
            <result column="userid" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
            <result column="note" property="note"/>
        </collection>


    </resultMap>
    <!-- 一对多关系 查询 -->
    <select id="selectUserOrders" resultMap="userAndOrdersResultMap">
        SELECT a.*,b.id oid ,b.userid,b.number,b.createtime,b.note
        FROM  user a,orders b
        WHERE a.id=b.userid
    </select>
    <!-- 多对多关系查询 -->
    <resultMap type="org.example.entity.User" id="UserAndItemsRstMap">
        <!-- 用户信息 -->
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="age" property="age" />
        <!-- 订单信息（一（用户）对多（订单）） -->
        <collection property="ordersList" ofType="org.example.entity.Orders">
            <id column="id" property="id" />
            <result column="userId" property="userId" />
            <result column="number" property="number" />
            <!-- 订单明细信息（一对多） -->
            <collection property="detailList" ofType="org.example.entity.Orderdetail">
                <id column="detailId" property="id" />
                <result column="items_id" property="itemsId" />
                <result column="items_num" property="itemsNum" />
                <!-- 商品信息（一对一） -->
                <association property="items" javaType="org.example.entity.Items">
                    <id column="items_id" property="id" />
                    <result column="name" property="name" />
                    <result column="price" property="price" />
                </association>
            </collection>
        </collection>
    </resultMap>
    <!-- 多对多 -->
    <select id="findUserAndItemsRstMap" resultMap="UserAndItemsRstMap">
        SELECT
            orders.id,
            orders.userid,
            orders.number,
            user.name,
            user.age,
            orderdetail.id detailId,
            orderdetail.items_id,
            orderdetail.items_num,
            items.name,
            items.price
        FROM
            orders,
            USER,
            orderdetail,
            items
        WHERE orders.userid = user.id
        AND orders.id = orderdetail.orders_id
        AND orderdetail.items_id = items.id
    </select>

</mapper>
